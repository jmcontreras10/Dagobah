# This config was automatically generated from your source code
# Stacks detected: deps:java:.,tool:gradle:
version: 2.1

executors:
  docker-publisher:
    environment:
      IMAGE_TAG: jmcontreras20/dagobah:latest
    docker:
      - image: docker:stable

jobs:
  run-tests:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - run:
          name: Calculate cache key
          command: |-
            find . -name 'gradlew*' -o -name '*.gradle*' | \
                    sort | xargs cat > /tmp/CIRCLECI_CACHE_KEY
      - restore_cache:
          key: cache-{{ checksum "/tmp/CIRCLECI_CACHE_KEY" }}
      - run:
          command: ./gradlew check
          sonarcloud-scan: true
      - run:
          command: ./gradlew build test
          sonarcloud-scan: true
      - store_test_results:
          path: build/test-results
      - save_cache:
          key: cache-{{ checksum "/tmp/CIRCLECI_CACHE_KEY" }}
          paths:
            - ~/.gradle/caches
      - store_artifacts:
          path: build/reports

  build:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: docker build --tag "${IMAGE_TAG}" .
      - run:
          name: Archive Docker image
          command: docker save --output image.tar "${IMAGE_TAG}"
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  publish:
    executor: docker-publisher
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load Docker image
          command: docker load --input /tmp/workspace/image.tar
      - run:
          name: Publish Docker image
          command: |
            echo "${DOCKERHUB_PASS}" | docker login --username "${DOCKERHUB_USERNAME}" --password-stdin
            docker push "${IMAGE_TAG}"

  deploy:
    docker:
      - image: google/cloud-sdk:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run: |
          echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
          gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
          gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}

      - run:
          name: Build docker-compose-template.yml
          command: |
            if [ -z "$DOCKERHUB_USERNAME" ]; then
              echo "Error: DOCKERHUB_USERNAME is not set."
              exit 1
            fi
            sed "s/DOCKER_IMAGE_NAME/$DOCKERHUB_USERNAME\/dagobah:latest/g" docker-compose-template.yml > docker-compose.yml
            sed -i "s/DOCKER_CONTAINER_NAME/$DOCKER_CONTAINER_NAME/g" docker-compose.yml

      - run:
          name: SCP docker-compose-template.yml to GCP instance
          command: |
            scp -o StrictHostKeyChecking=no -r ./docker-compose.yml $GCE_SSH_USERNAME@$GCE_INSTANCE_IP:/home/$GCE_SSH_USERNAME/

      - run:
          name: SCP db folder to GCP instance
          command: |
            scp -o StrictHostKeyChecking=no -r ./db $GCE_SSH_USERNAME@$GCE_INSTANCE_IP:/home/$GCE_SSH_USERNAME

      - run:
          name: SSH into GCP instance and deploy
          command: |
            ssh -o StrictHostKeyChecking=no $GCE_SSH_USERNAME@$GCE_INSTANCE_IP \<< 'EOF'
              # Check if docker-compose.yml exists
              ls -l /home/$GCE_SSH_USERNAME/docker-compose.yml
              # Use sudo for Docker commands if necessary
              sudo docker compose -f /home/$GCE_SSH_USERNAME/docker-compose.yml down
              sudo docker compose -f /home/$GCE_SSH_USERNAME/docker-compose.yml build --pull
              sudo docker compose -f /home/$GCE_SSH_USERNAME/docker-compose.yml up -d
              sudo docker image prune -f
              # Check if mongo-init.sh exists
              ls -l /home/$GCE_SSH_USERNAME/db/mongo-init.sh
              sh /home/$GCE_SSH_USERNAME/db/mongo-init.sh
            EOF

workflows:
  version: 2
  build-and-push:
    jobs:
      - deploy
#      - run-tests
#      - build:
#          requires:
#            - run-tests
#      - publish:
#          requires:
#            - build
#      - deploy:
#          requires:
#            - publish